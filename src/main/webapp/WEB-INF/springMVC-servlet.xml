<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <!--有了这个标签，我们上下文相关的注解，就可以自动被spring中的bean进行管理了。-->
    <context:annotation-config/>
    <!--启动注解驱动的spring mvc功能,有了它之后：会自动为我们将扫描到
    的@Component，@Controller，@Service，@Repository等注解标记的
    组件注册到工厂中，来处理我们的请求。-->
    <mvc:annotation-driven/>
    <!--[启动包扫描功能]指定哪些路径下的注解会被spring管理。-->
    <context:component-scan base-package="smt666.mall.controller"/>
    <context:component-scan base-package="smt666.mall.service"/>

    <mvc:interceptors>
        <bean class="smt666.common.util.HttpRequestInterceptor"/>
    </mvc:interceptors>

    <!--在我们写好ApplicationContextHelper类并且添加了【@Component("applicationContextHelper")】注解后，在此处配置，
        我们让这个类在项目启动时就马上被加载，所以设置lazy-init属性的值为false代表，一启动就加载。-->
    <bean class="smt666.common.util.ApplicationContextHelper" lazy-init="false"/>
    <!--配置我们自定义的bean，把SpringExceptionResolver交给SpringMVC去管理。-->
    <bean class="smt666.common.exception.SpringExceptionResolver"/>

    <!--=============SpringMVC中关于请求相关的配置=================================================-->
    <!--配置核心的类-->
    <!--当我们来定义一个SpringMVC接口的时候，我们会使用@RequestMapping这个注解。
    RequestMappingHandlerMapping这个类，可以帮助我们把定义好的@RequestMapping注解，找到对应的接口来进行处理。
    即：告诉请求，应该找哪一个接口中的方法来进行处理。-->
   <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>-->

    <!--告诉SpringMVC当处理完一个请求准备响应结果数据时，应该使用什么样的数据格式响应给用户。
    比如，我们是准备返回用户一个JSON数据，还是给一个页面等等。
    所以，当我们BeanNameViewResolver使用的时候，我们就需要做一些额外的配置：
    我们需要指定JSON的处理-->
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
    <!--指定JSON数据的响应处理。id的值jsonView是BeanNameViewResolver类中的属性，固定的。它的作用是，
    相当于把我们定义的@RequestMapping注解下面的类，在遇到以JSON格式返回时，
    就会使用此处配置的这个MappingJackson2JsonView类来进行处理-->
    <bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
    <!--我们对JSP页面做一些配置。【内部资源视图解析器】-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--参数1【prefix】，项目路径的前缀。配置的是：文件所在的路径，表示这文件是从哪里开始的。-->
        <property name="prefix" value="/views/"/>
        <!--参数2【suffix】，文件的后缀。此处表示我们将通过.jsp后缀的文件来渲染页面。-->
        <property name="suffix" value=".jsp"/>
    </bean>
    <!--===========================================================================================-->

</beans>